!function(e){function t(i){if(o[i])return o[i].exports;var r=o[i]={exports:{},id:i,loaded:!1};return e[i].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var o={};return t.m=e,t.c=o,t.p="",t(0)}([function(e,t,o){"use strict";var i=o(1);t.reportDirective=i["default"];var r=o(2),n=o(3);t.service=n["default"],angular.module("powerbi.global",[]).value("PowerBiGlobal",window.Powerbi),angular.module("powerbi.service",["powerbi.global"]).service("PowerBiService",n["default"]),angular.module("powerbi.components.powerbiReport",["powerbi.service"]).directive("powerbiReport",function(){return new i["default"]}),angular.module("powerbi.components.powerbiComponent",["powerbi.service"]).directive("powerbiComponent",function(){return new r["default"]}),angular.module("powerbi.components",["powerbi.components.powerbiReport","powerbi.components.powerbiComponent"]),angular.module("powerbi",["powerbi.service","powerbi.components"])},function(e,t){"use strict";var o=function(){function e(e,t,o){this.$scope=e,this.$timeout=t,this.powerBiService=o}return e.prototype.init=function(e){var t=this;this.validateRequiredAttributes()&&this.embed(e);var o=this.debounce(this.embed.bind(this),100);this.$scope.$watch(function(){return t.embedUrl},function(i,r){i!==r&&t.validateRequiredAttributes()&&o(e)}),this.$scope.$watch(function(){return t.accessToken},function(i,r){i!==r&&t.validateRequiredAttributes()&&o(e)})},e.prototype.embed=function(e){var t={type:"report",embedUrl:this.embedUrl,accessToken:this.accessToken};angular.extend(t,this.options),this.component=this.powerBiService.embed(e,t)},e.prototype.reset=function(e){this.powerBiService.reset(e)},e.prototype.debounce=function(e,t){var o,i=this;return function(){for(var r=[],n=0;n<arguments.length;n++)r[n-0]=arguments[n];o&&i.$timeout.cancel(o),o=i.$timeout(function(){return e.apply(void 0,r)},t)}},e.prototype.validateRequiredAttributes=function(){return"string"==typeof this.embedUrl&&this.embedUrl.length>0&&"string"==typeof this.accessToken&&this.accessToken.length>0},e.$inject=["$scope","$timeout","PowerBiService"],e}();t.Controller=o;var i=function(){function e(){this.restrict="E",this.replace=!0,this.template='<div class="powerbi-frame"></div>',this.scope={accessToken:"=",embedUrl:"=",options:"=?"},this.controller=o,this.bindToController=!0,this.controllerAs="vm"}return e.prototype.link=function(e,t,o,i,r){i.init(t[0]),e.$on("$destroy",function(){i.reset(t[0])})},e}();Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i},function(e,t){"use strict";var o=function(){function e(e,t){this.$scope=e,this.powerBiService=t,this.validationMap={report:this.validateReportOptions}}return e.prototype.init=function(e){var t=this;this.validateOptions(this.options)&&this.embed(e,this.options),this.$scope.$watch(function(){return t.options},function(o,i){o!==i&&t.validateOptions(t.options)&&t.embed(e,t.options)},!0)},e.prototype.embed=function(e,t){this.component=this.powerBiService.embed(e,t)},e.prototype.reset=function(e){this.powerBiService.reset(e)},e.prototype.validateOptions=function(e){return this.options&&"string"==typeof e.embedUrl&&e.embedUrl.length>0&&"string"==typeof e.accessToken&&e.accessToken.length>0&&this.validationMap.hasOwnProperty(e.type)&&"function"==typeof this.validationMap[e.type]?this.validationMap[e.type](e):!1},e.prototype.validateReportOptions=function(e){return!0},e.$inject=["$scope","PowerBiService"],e}();t.Controller=o;var i=function(){function e(){this.restrict="E",this.replace=!0,this.template='<div class="powerbi-frame"></div>',this.scope={accessToken:"=",embedUrl:"=",options:"=?"},this.controller=o,this.bindToController=!0,this.controllerAs="vm"}return e.prototype.link=function(e,t,o,i,r){i.init(t[0]),e.$on("$destroy",function(){i.reset(t[0])})},e}();Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i},function(e,t){"use strict";var o=function(){function e(e){this.powerBiCoreService=new e}return e.prototype.embed=function(e,t){return this.powerBiCoreService.embed(e,t)},e.prototype.reset=function(e){this.powerBiCoreService.reset(e)},e.$inject=["PowerBiGlobal"],e}();Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=o}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuZ3VsYXItcG93ZXJiaS5qcyJdLCJuYW1lcyI6WyJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImV4cG9ydHMiLCJtb2R1bGUiLCJpZCIsImxvYWRlZCIsImNhbGwiLCJtIiwiYyIsInAiLCJjb21wb25lbnRfMSIsInJlcG9ydERpcmVjdGl2ZSIsImNvbXBvbmVudF8yIiwicG93ZXJiaV8xIiwic2VydmljZSIsImFuZ3VsYXIiLCJ2YWx1ZSIsIndpbmRvdyIsIlBvd2VyYmkiLCJkaXJlY3RpdmUiLCJDb250cm9sbGVyIiwiJHNjb3BlIiwiJHRpbWVvdXQiLCJwb3dlckJpU2VydmljZSIsInRoaXMiLCJwcm90b3R5cGUiLCJpbml0IiwiZWxlbWVudCIsIl90aGlzIiwidmFsaWRhdGVSZXF1aXJlZEF0dHJpYnV0ZXMiLCJlbWJlZCIsImRlYm91bmNlZEVtYmVkIiwiZGVib3VuY2UiLCJiaW5kIiwiJHdhdGNoIiwiZW1iZWRVcmwiLCJvbGRFbWJlZFVybCIsImFjY2Vzc1Rva2VuIiwib2xkQWNjZXNzVG9rZW4iLCJjb25maWciLCJ0eXBlIiwiZXh0ZW5kIiwib3B0aW9ucyIsImNvbXBvbmVudCIsInJlc2V0IiwiZnVuYyIsIndhaXQiLCJwcmV2aW91c1RpbWVvdXRQcm9taXNlIiwiYXJncyIsIl9pIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiY2FuY2VsIiwiYXBwbHkiLCIkaW5qZWN0IiwiRGlyZWN0aXZlIiwicmVzdHJpY3QiLCJyZXBsYWNlIiwidGVtcGxhdGUiLCJzY29wZSIsImNvbnRyb2xsZXIiLCJiaW5kVG9Db250cm9sbGVyIiwiY29udHJvbGxlckFzIiwibGluayIsImF0dHJpYnV0ZXMiLCJ0cmFuc2NsdWRlRm4iLCIkb24iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbGlkYXRpb25NYXAiLCJyZXBvcnQiLCJ2YWxpZGF0ZVJlcG9ydE9wdGlvbnMiLCJ2YWxpZGF0ZU9wdGlvbnMiLCJvbGRPcHRpb25zIiwiaGFzT3duUHJvcGVydHkiLCJQb3dlckJpU2VydmljZSIsIlBvd2VyQmkiLCJwb3dlckJpQ29yZVNlcnZpY2UiXSwibWFwcGluZ3MiOiJDQUFTLFNBQVVBLEdBS1QsUUFBU0MsR0FBb0JDLEdBRzVCLEdBQUdDLEVBQWlCRCxHQUNuQixNQUFPQyxHQUFpQkQsR0FBVUUsT0FHbkMsSUFBSUMsR0FBU0YsRUFBaUJELElBQzdCRSxXQUNBRSxHQUFJSixFQUNKSyxRQUFRLEVBVVQsT0FOQVAsR0FBUUUsR0FBVU0sS0FBS0gsRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0gsR0FHL0RJLEVBQU9FLFFBQVMsRUFHVEYsRUFBT0QsUUF2QmYsR0FBSUQsS0FxQ0osT0FUQUYsR0FBb0JRLEVBQUlULEVBR3hCQyxFQUFvQlMsRUFBSVAsRUFHeEJGLEVBQW9CVSxFQUFJLEdBR2pCVixFQUFvQixLQUsvQixTQUFTSSxFQUFRRCxFQUFTSCxHQUUvQixZQUNBLElBQUlXLEdBQWNYLEVBQW9CLEVBQ3RDRyxHQUFRUyxnQkFBa0JELEVBQUFBLFVBQzFCLElBQUlFLEdBQWNiLEVBQW9CLEdBQ2xDYyxFQUFZZCxFQUFvQixFQUNwQ0csR0FBUVksUUFBVUQsRUFBQUEsV0FDbEJFLFFBQVFaLE9BQU8scUJBQ1ZhLE1BQU0sZ0JBQWlCQyxPQUFPQyxTQUNuQ0gsUUFBUVosT0FBTyxtQkFDWCxtQkFFQ1csUUFBUSxpQkFBcUNELEVBQUFBLFlBQ2xERSxRQUFRWixPQUFPLG9DQUNYLG9CQUVDZ0IsVUFBVSxnQkFBNEMsV0FBYyxNQUFPLElBQUlULEdBQUFBLGFBQ3BGSyxRQUFRWixPQUFPLHVDQUNYLG9CQUVDZ0IsVUFBVSxtQkFBa0QsV0FBYyxNQUFPLElBQUlQLEdBQUFBLGFBQzFGRyxRQUFRWixPQUFPLHNCQUNYLG1DQUNBLHdDQUVKWSxRQUFRWixPQUFPLFdBQ1gsa0JBQ0Esd0JBTUMsU0FBU0EsRUFBUUQsR0FFdEIsWUFDQSxJQUFJa0IsR0FBYyxXQUNkLFFBQVNBLEdBQVdDLEVBQVFDLEVBQVVDLEdBQ2xDQyxLQUFLSCxPQUFTQSxFQUNkRyxLQUFLRixTQUFXQSxFQUNoQkUsS0FBS0QsZUFBaUJBLEVBK0UxQixNQXpFQUgsR0FBV0ssVUFBVUMsS0FBTyxTQUFVQyxHQUNsQyxHQUFJQyxHQUFRSixJQUNSQSxNQUFLSyw4QkFDTEwsS0FBS00sTUFBTUgsRUFNZixJQUFJSSxHQUFpQlAsS0FBS1EsU0FBU1IsS0FBS00sTUFBTUcsS0FBS1QsTUFBTyxJQUMxREEsTUFBS0gsT0FBT2EsT0FBTyxXQUFjLE1BQU9OLEdBQU1PLFVBQWEsU0FBVUEsRUFBVUMsR0FFdkVELElBQWFDLEdBR2JSLEVBQU1DLDhCQUNORSxFQUFlSixLQUd2QkgsS0FBS0gsT0FBT2EsT0FBTyxXQUFjLE1BQU9OLEdBQU1TLGFBQWdCLFNBQVVBLEVBQWFDLEdBRTdFRCxJQUFnQkMsR0FHaEJWLEVBQU1DLDhCQUNORSxFQUFlSixNQU8zQlAsRUFBV0ssVUFBVUssTUFBUSxTQUFVSCxHQUNuQyxHQUFJWSxJQUNBQyxLQUFNLFNBQ05MLFNBQVVYLEtBQUtXLFNBQ2ZFLFlBQWFiLEtBQUthLFlBRXRCdEIsU0FBUTBCLE9BQU9GLEVBQVFmLEtBQUtrQixTQUM1QmxCLEtBQUttQixVQUFZbkIsS0FBS0QsZUFBZU8sTUFBTUgsRUFBU1ksSUFLeERuQixFQUFXSyxVQUFVbUIsTUFBUSxTQUFVakIsR0FDbkNILEtBQUtELGVBQWVxQixNQUFNakIsSUFFOUJQLEVBQVdLLFVBQVVPLFNBQVcsU0FBVWEsRUFBTUMsR0FDNUMsR0FDSUMsR0FEQW5CLEVBQVFKLElBRVosT0FBTyxZQUVILElBQUssR0FERHdCLE1BQ0tDLEVBQUssRUFBR0EsRUFBS0MsVUFBVUMsT0FBUUYsSUFDcENELEVBQUtDLEVBQUssR0FBS0MsVUFBVUQsRUFFekJGLElBQ0FuQixFQUFNTixTQUFTOEIsT0FBT0wsR0FFMUJBLEVBQXlCbkIsRUFBTU4sU0FBUyxXQUFjLE1BQU91QixHQUFLUSxNQUFNLE9BQVFMLElBQVVGLEtBTWxHMUIsRUFBV0ssVUFBVUksMkJBQTZCLFdBQzlDLE1BQWlDLGdCQUFsQkwsTUFBS1csVUFBeUJYLEtBQUtXLFNBQVNnQixPQUFTLEdBQ2hDLGdCQUFyQjNCLE1BQUthLGFBQTRCYixLQUFLYSxZQUFZYyxPQUFTLEdBRTlFL0IsRUFBV2tDLFNBQ1AsU0FDQSxXQUNBLGtCQUVHbEMsSUFFWGxCLEdBQVFrQixXQUFhQSxDQUNyQixJQUFJbUMsR0FBYSxXQUNiLFFBQVNBLEtBRUwvQixLQUFLZ0MsU0FBVyxJQUNoQmhDLEtBQUtpQyxTQUFVLEVBQ2ZqQyxLQUFLa0MsU0FBVyxvQ0FDaEJsQyxLQUFLbUMsT0FDRHRCLFlBQWEsSUFDYkYsU0FBVSxJQUNWTyxRQUFTLE1BRWJsQixLQUFLb0MsV0FBYXhDLEVBQ2xCSSxLQUFLcUMsa0JBQW1CLEVBQ3hCckMsS0FBS3NDLGFBQWUsS0FReEIsTUFOQVAsR0FBVTlCLFVBQVVzQyxLQUFPLFNBQVUxQyxFQUFRTSxFQUFTcUMsRUFBWUosRUFBWUssR0FDMUVMLEVBQVdsQyxLQUFLQyxFQUFRLElBQ3hCTixFQUFPNkMsSUFBSSxXQUFZLFdBQ25CTixFQUFXaEIsTUFBTWpCLEVBQVEsT0FHMUI0QixJQUVYWSxRQUFPQyxlQUFlbEUsRUFBUyxjQUFnQmMsT0FBTyxJQUN0RGQsRUFBQUEsV0FBa0JxRCxHQUtiLFNBQVNwRCxFQUFRRCxHQUV0QixZQUNBLElBQUlrQixHQUFjLFdBQ2QsUUFBU0EsR0FBV0MsRUFBUUUsR0FDeEJDLEtBQUtILE9BQVNBLEVBQ2RHLEtBQUtELGVBQWlCQSxFQUN0QkMsS0FBSzZDLGVBQ0RDLE9BQVU5QyxLQUFLK0MsdUJBeUR2QixNQWxEQW5ELEdBQVdLLFVBQVVDLEtBQU8sU0FBVUMsR0FDbEMsR0FBSUMsR0FBUUosSUFDUkEsTUFBS2dELGdCQUFnQmhELEtBQUtrQixVQUMxQmxCLEtBQUtNLE1BQU1ILEVBQVNILEtBQUtrQixTQUU3QmxCLEtBQUtILE9BQU9hLE9BQU8sV0FBYyxNQUFPTixHQUFNYyxTQUFZLFNBQVVBLEVBQVMrQixHQUVyRS9CLElBQVkrQixHQUdaN0MsRUFBTTRDLGdCQUFnQjVDLEVBQU1jLFVBQzVCZCxFQUFNRSxNQUFNSCxFQUFTQyxFQUFNYyxXQUVoQyxJQUtQdEIsRUFBV0ssVUFBVUssTUFBUSxTQUFVSCxFQUFTZSxHQUM1Q2xCLEtBQUttQixVQUFZbkIsS0FBS0QsZUFBZU8sTUFBTUgsRUFBU2UsSUFLeER0QixFQUFXSyxVQUFVbUIsTUFBUSxTQUFVakIsR0FDbkNILEtBQUtELGVBQWVxQixNQUFNakIsSUFLOUJQLEVBQVdLLFVBQVUrQyxnQkFBa0IsU0FBVTlCLEdBQzdDLE1BQUtsQixNQUFLa0IsU0FDMkIsZ0JBQXJCQSxHQUFRUCxVQUF5Qk8sRUFBUVAsU0FBU2dCLE9BQVMsR0FDbkMsZ0JBQXhCVCxHQUFRTCxhQUE0QkssRUFBUUwsWUFBWWMsT0FBUyxHQUc3RTNCLEtBQUs2QyxjQUFjSyxlQUFlaEMsRUFBUUYsT0FBcUQsa0JBQXJDaEIsTUFBSzZDLGNBQWMzQixFQUFRRixNQUM5RWhCLEtBQUs2QyxjQUFjM0IsRUFBUUYsTUFBTUUsSUFIakMsR0FTZnRCLEVBQVdLLFVBQVU4QyxzQkFBd0IsU0FBVTdCLEdBQ25ELE9BQU8sR0FFWHRCLEVBQVdrQyxTQUNQLFNBQ0Esa0JBRUdsQyxJQUVYbEIsR0FBUWtCLFdBQWFBLENBQ3JCLElBQUltQyxHQUFhLFdBQ2IsUUFBU0EsS0FFTC9CLEtBQUtnQyxTQUFXLElBQ2hCaEMsS0FBS2lDLFNBQVUsRUFDZmpDLEtBQUtrQyxTQUFXLG9DQUNoQmxDLEtBQUttQyxPQUNEdEIsWUFBYSxJQUNiRixTQUFVLElBQ1ZPLFFBQVMsTUFFYmxCLEtBQUtvQyxXQUFheEMsRUFDbEJJLEtBQUtxQyxrQkFBbUIsRUFDeEJyQyxLQUFLc0MsYUFBZSxLQVF4QixNQU5BUCxHQUFVOUIsVUFBVXNDLEtBQU8sU0FBVTFDLEVBQVFNLEVBQVNxQyxFQUFZSixFQUFZSyxHQUMxRUwsRUFBV2xDLEtBQUtDLEVBQVEsSUFDeEJOLEVBQU82QyxJQUFJLFdBQVksV0FDbkJOLEVBQVdoQixNQUFNakIsRUFBUSxPQUcxQjRCLElBRVhZLFFBQU9DLGVBQWVsRSxFQUFTLGNBQWdCYyxPQUFPLElBQ3REZCxFQUFBQSxXQUFrQnFELEdBS2IsU0FBU3BELEVBQVFELEdBRXRCLFlBQ0EsSUFBSXlFLEdBQWtCLFdBQ2xCLFFBQVNBLEdBQWVDLEdBQ3BCcEQsS0FBS3FELG1CQUFxQixHQUFJRCxHQVdsQyxNQVRBRCxHQUFlbEQsVUFBVUssTUFBUSxTQUFVSCxFQUFTWSxHQUNoRCxNQUFPZixNQUFLcUQsbUJBQW1CL0MsTUFBTUgsRUFBU1ksSUFFbERvQyxFQUFlbEQsVUFBVW1CLE1BQVEsU0FBVWpCLEdBQ3ZDSCxLQUFLcUQsbUJBQW1CakMsTUFBTWpCLElBRWxDZ0QsRUFBZXJCLFNBQ1gsaUJBRUdxQixJQUVYUixRQUFPQyxlQUFlbEUsRUFBUyxjQUFnQmMsT0FBTyxJQUN0RGQsRUFBQUEsV0FBa0J5RSIsImZpbGUiOiJhbmd1bGFyLXBvd2VyYmkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwXG4vKioqKioqLyBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4vKioqKioqLyBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4vKioqKioqLyBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pXG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRleHBvcnRzOiB7fSxcbi8qKioqKiovIFx0XHRcdGlkOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGxvYWRlZDogZmFsc2Vcbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuLyoqKioqKi8gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbi8qKioqKiovIFx0fVxuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xyXG5cdHZhciBjb21wb25lbnRfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XHJcblx0ZXhwb3J0cy5yZXBvcnREaXJlY3RpdmUgPSBjb21wb25lbnRfMS5kZWZhdWx0O1xyXG5cdHZhciBjb21wb25lbnRfMiA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XHJcblx0dmFyIHBvd2VyYmlfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XHJcblx0ZXhwb3J0cy5zZXJ2aWNlID0gcG93ZXJiaV8xLmRlZmF1bHQ7XHJcblx0YW5ndWxhci5tb2R1bGUoJ3Bvd2VyYmkuZ2xvYmFsJywgW10pXHJcblx0ICAgIC52YWx1ZSgnUG93ZXJCaUdsb2JhbCcsIHdpbmRvdy5Qb3dlcmJpKTtcclxuXHRhbmd1bGFyLm1vZHVsZSgncG93ZXJiaS5zZXJ2aWNlJywgW1xyXG5cdCAgICAncG93ZXJiaS5nbG9iYWwnXHJcblx0XSlcclxuXHQgICAgLnNlcnZpY2UoJ1Bvd2VyQmlTZXJ2aWNlJyAvKiBzZXJ2aWNlLm5hbWUgKi8sIHBvd2VyYmlfMS5kZWZhdWx0KTtcclxuXHRhbmd1bGFyLm1vZHVsZSgncG93ZXJiaS5jb21wb25lbnRzLnBvd2VyYmlSZXBvcnQnLCBbXHJcblx0ICAgICdwb3dlcmJpLnNlcnZpY2UnXHJcblx0XSlcclxuXHQgICAgLmRpcmVjdGl2ZSgncG93ZXJiaVJlcG9ydCcgLyogcmVwb3J0RGlyZWN0aXZlLm5hbWUgKi8sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBjb21wb25lbnRfMS5kZWZhdWx0KCk7IH0pO1xyXG5cdGFuZ3VsYXIubW9kdWxlKCdwb3dlcmJpLmNvbXBvbmVudHMucG93ZXJiaUNvbXBvbmVudCcsIFtcclxuXHQgICAgJ3Bvd2VyYmkuc2VydmljZSdcclxuXHRdKVxyXG5cdCAgICAuZGlyZWN0aXZlKCdwb3dlcmJpQ29tcG9uZW50JyAvKiBjb21wb25lbnREaXJlY3RpdmUubmFtZSAqLywgZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IGNvbXBvbmVudF8yLmRlZmF1bHQoKTsgfSk7XHJcblx0YW5ndWxhci5tb2R1bGUoJ3Bvd2VyYmkuY29tcG9uZW50cycsIFtcclxuXHQgICAgJ3Bvd2VyYmkuY29tcG9uZW50cy5wb3dlcmJpUmVwb3J0JyxcclxuXHQgICAgJ3Bvd2VyYmkuY29tcG9uZW50cy5wb3dlcmJpQ29tcG9uZW50J1xyXG5cdF0pO1xyXG5cdGFuZ3VsYXIubW9kdWxlKCdwb3dlcmJpJywgW1xyXG5cdCAgICAncG93ZXJiaS5zZXJ2aWNlJyxcclxuXHQgICAgJ3Bvd2VyYmkuY29tcG9uZW50cydcclxuXHRdKTtcclxuXG5cbi8qKiovIH0sXG4vKiAxICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcclxuXHR2YXIgQ29udHJvbGxlciA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIENvbnRyb2xsZXIoJHNjb3BlLCAkdGltZW91dCwgcG93ZXJCaVNlcnZpY2UpIHtcclxuXHQgICAgICAgIHRoaXMuJHNjb3BlID0gJHNjb3BlO1xyXG5cdCAgICAgICAgdGhpcy4kdGltZW91dCA9ICR0aW1lb3V0O1xyXG5cdCAgICAgICAgdGhpcy5wb3dlckJpU2VydmljZSA9IHBvd2VyQmlTZXJ2aWNlO1xyXG5cdCAgICB9XHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBIYW5kbGVyIGFmdGVyIGNvbXBvbmVudCBpcyBpbnNlcnRlZCBpbiB0aGUgRE9NLiBJZiByZXF1aXJlZCBhdHRyaWJ1dGVzIGFyZSB2YWxpZCBlbWJlZCBpbW1lZGlhdGVseVxyXG5cdCAgICAgKiBvdGhlcndpc2UsIHdhdGNoIGF0dHJpYnV0ZXMgYW5kIGVtYmVkIHdoZW4gdGhleSBhcmUgdmFsaWQuXHJcblx0ICAgICAqL1xyXG5cdCAgICBDb250cm9sbGVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuXHQgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblx0ICAgICAgICBpZiAodGhpcy52YWxpZGF0ZVJlcXVpcmVkQXR0cmlidXRlcygpKSB7XHJcblx0ICAgICAgICAgICAgdGhpcy5lbWJlZChlbGVtZW50KTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIC8vIFRPRE86IExvb2sgZm9yIGFub3RoZXIgd2F5IHRvIGVuc3VyZSBib3RoIGF0dHJpYnV0ZXMgaGF2ZSBjaGFuZ2VkIGJlZm9yZSBjYWxsaW5nIHRoaXMuZW1iZWQuXHJcblx0ICAgICAgICAvLyBJbiBtb3N0IGNhc2VzIGVtYmVkVXJsIGFuZCBhY2Nlc3NUb2tlbiB3aWxsIGJlIHVwZGF0ZWQgYXQgdGhlIHNhbWUgdGltZSwgYnV0IHRoaXMgdGFrZXMgdHdvIGN5Y2xlc1xyXG5cdCAgICAgICAgLy8gZm9yIHRoZSBjaGFuZ2VzIHRvIHByb3BlZ2F0ZSBmcm9tIHRoZSBwYXJlbnQgJHNjb3BlIHRvIHRoaXMgJHNjb3BlLlxyXG5cdCAgICAgICAgLy8gcGVyaGFwcyB3ZSBjYW4ganVzdCB1c2UgJHRpbWVvdXQoKSBkaXJlY3RseS4gXHJcblx0ICAgICAgICB2YXIgZGVib3VuY2VkRW1iZWQgPSB0aGlzLmRlYm91bmNlKHRoaXMuZW1iZWQuYmluZCh0aGlzKSwgMTAwKTtcclxuXHQgICAgICAgIHRoaXMuJHNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5lbWJlZFVybDsgfSwgZnVuY3Rpb24gKGVtYmVkVXJsLCBvbGRFbWJlZFVybCkge1xyXG5cdCAgICAgICAgICAgIC8vIEd1YXJkIGFnYWluc3QgaW5pdGlhbGl6YXRpb25cclxuXHQgICAgICAgICAgICBpZiAoZW1iZWRVcmwgPT09IG9sZEVtYmVkVXJsKSB7XHJcblx0ICAgICAgICAgICAgICAgIHJldHVybjtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYgKF90aGlzLnZhbGlkYXRlUmVxdWlyZWRBdHRyaWJ1dGVzKCkpIHtcclxuXHQgICAgICAgICAgICAgICAgZGVib3VuY2VkRW1iZWQoZWxlbWVudCk7XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgICAgICB0aGlzLiRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuYWNjZXNzVG9rZW47IH0sIGZ1bmN0aW9uIChhY2Nlc3NUb2tlbiwgb2xkQWNjZXNzVG9rZW4pIHtcclxuXHQgICAgICAgICAgICAvLyBHdWFyZCBhZ2FpbnN0IGluaXRpYWxpemF0aW9uXHJcblx0ICAgICAgICAgICAgaWYgKGFjY2Vzc1Rva2VuID09PSBvbGRBY2Nlc3NUb2tlbikge1xyXG5cdCAgICAgICAgICAgICAgICByZXR1cm47XHJcblx0ICAgICAgICAgICAgfVxyXG5cdCAgICAgICAgICAgIGlmIChfdGhpcy52YWxpZGF0ZVJlcXVpcmVkQXR0cmlidXRlcygpKSB7XHJcblx0ICAgICAgICAgICAgICAgIGRlYm91bmNlZEVtYmVkKGVsZW1lbnQpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0pO1xyXG5cdCAgICB9O1xyXG5cdCAgICAvKipcclxuXHQgICAgICogR2l2ZW4gYW4gSFRNTEVsZW1lbnQsIGNvbnN0cnVjdCBhbiBlbWJlZCBjb25maWd1cmF0aW9uIGJhc2VkIG9uIGF0dHJpYnV0ZXMgYW5kIHBhc3MgdG8gc2VydmljZS5cclxuXHQgICAgICovXHJcblx0ICAgIENvbnRyb2xsZXIucHJvdG90eXBlLmVtYmVkID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuXHQgICAgICAgIHZhciBjb25maWcgPSB7XHJcblx0ICAgICAgICAgICAgdHlwZTogJ3JlcG9ydCcsXHJcblx0ICAgICAgICAgICAgZW1iZWRVcmw6IHRoaXMuZW1iZWRVcmwsXHJcblx0ICAgICAgICAgICAgYWNjZXNzVG9rZW46IHRoaXMuYWNjZXNzVG9rZW5cclxuXHQgICAgICAgIH07XHJcblx0ICAgICAgICBhbmd1bGFyLmV4dGVuZChjb25maWcsIHRoaXMub3B0aW9ucyk7XHJcblx0ICAgICAgICB0aGlzLmNvbXBvbmVudCA9IHRoaXMucG93ZXJCaVNlcnZpY2UuZW1iZWQoZWxlbWVudCwgY29uZmlnKTtcclxuXHQgICAgfTtcclxuXHQgICAgLyoqXHJcblx0ICAgICAqIEhhbmRsZXIgd2hlbiBjb21wb25lbnQgaXMgcmVtb3ZlZCBmcm9tIERPTS4gRm9yd2FyZHMgY2FsbCB0byBzZXJ2aWNlIHRvIHBlcmZvcm0gY2xlYW51cCBvZiByZWZlcmVuY2VzIGJlZm9yZSBET00gaXMgbW9kaWZpZWQuXHJcblx0ICAgICAqL1xyXG5cdCAgICBDb250cm9sbGVyLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcblx0ICAgICAgICB0aGlzLnBvd2VyQmlTZXJ2aWNlLnJlc2V0KGVsZW1lbnQpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBDb250cm9sbGVyLnByb3RvdHlwZS5kZWJvdW5jZSA9IGZ1bmN0aW9uIChmdW5jLCB3YWl0KSB7XHJcblx0ICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cdCAgICAgICAgdmFyIHByZXZpb3VzVGltZW91dFByb21pc2U7XHJcblx0ICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIHZhciBhcmdzID0gW107XHJcblx0ICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcclxuXHQgICAgICAgICAgICAgICAgYXJnc1tfaSAtIDBdID0gYXJndW1lbnRzW19pXTtcclxuXHQgICAgICAgICAgICB9XHJcblx0ICAgICAgICAgICAgaWYgKHByZXZpb3VzVGltZW91dFByb21pc2UpIHtcclxuXHQgICAgICAgICAgICAgICAgX3RoaXMuJHRpbWVvdXQuY2FuY2VsKHByZXZpb3VzVGltZW91dFByb21pc2UpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBwcmV2aW91c1RpbWVvdXRQcm9taXNlID0gX3RoaXMuJHRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gZnVuYy5hcHBseSh2b2lkIDAsIGFyZ3MpOyB9LCB3YWl0KTtcclxuXHQgICAgICAgIH07XHJcblx0ICAgIH07XHJcblx0ICAgIC8qKlxyXG5cdCAgICAgKiBFbnN1cmUgcmVxdWlyZWQgYXR0cmlidXRlcyAoZW1iZWRVcmwgYW5kIGFjY2Vzc1Rva2VuIGFyZSB2YWxpZCBiZWZvcmUgYXR0ZW1wdGluZyB0byBlbWJlZClcclxuXHQgICAgICovXHJcblx0ICAgIENvbnRyb2xsZXIucHJvdG90eXBlLnZhbGlkYXRlUmVxdWlyZWRBdHRyaWJ1dGVzID0gZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgcmV0dXJuICh0eXBlb2YgdGhpcy5lbWJlZFVybCA9PT0gJ3N0cmluZycgJiYgdGhpcy5lbWJlZFVybC5sZW5ndGggPiAwKVxyXG5cdCAgICAgICAgICAgICYmICh0eXBlb2YgdGhpcy5hY2Nlc3NUb2tlbiA9PT0gJ3N0cmluZycgJiYgdGhpcy5hY2Nlc3NUb2tlbi5sZW5ndGggPiAwKTtcclxuXHQgICAgfTtcclxuXHQgICAgQ29udHJvbGxlci4kaW5qZWN0ID0gW1xyXG5cdCAgICAgICAgJyRzY29wZScsXHJcblx0ICAgICAgICAnJHRpbWVvdXQnLFxyXG5cdCAgICAgICAgJ1Bvd2VyQmlTZXJ2aWNlJ1xyXG5cdCAgICBdO1xyXG5cdCAgICByZXR1cm4gQ29udHJvbGxlcjtcclxuXHR9KCkpO1xyXG5cdGV4cG9ydHMuQ29udHJvbGxlciA9IENvbnRyb2xsZXI7XHJcblx0dmFyIERpcmVjdGl2ZSA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIERpcmVjdGl2ZSgpIHtcclxuXHQgICAgICAgIC8vIHN0YXRpYyBuYW1lID0gXCJwb3dlcmJpUmVwb3J0XCI7XHJcblx0ICAgICAgICB0aGlzLnJlc3RyaWN0ID0gXCJFXCI7XHJcblx0ICAgICAgICB0aGlzLnJlcGxhY2UgPSB0cnVlO1xyXG5cdCAgICAgICAgdGhpcy50ZW1wbGF0ZSA9ICc8ZGl2IGNsYXNzPVwicG93ZXJiaS1mcmFtZVwiPjwvZGl2Pic7XHJcblx0ICAgICAgICB0aGlzLnNjb3BlID0ge1xyXG5cdCAgICAgICAgICAgIGFjY2Vzc1Rva2VuOiBcIj1cIixcclxuXHQgICAgICAgICAgICBlbWJlZFVybDogXCI9XCIsXHJcblx0ICAgICAgICAgICAgb3B0aW9uczogXCI9P1wiXHJcblx0ICAgICAgICB9O1xyXG5cdCAgICAgICAgdGhpcy5jb250cm9sbGVyID0gQ29udHJvbGxlcjtcclxuXHQgICAgICAgIHRoaXMuYmluZFRvQ29udHJvbGxlciA9IHRydWU7XHJcblx0ICAgICAgICB0aGlzLmNvbnRyb2xsZXJBcyA9IFwidm1cIjtcclxuXHQgICAgfVxyXG5cdCAgICBEaXJlY3RpdmUucHJvdG90eXBlLmxpbmsgPSBmdW5jdGlvbiAoJHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzLCBjb250cm9sbGVyLCB0cmFuc2NsdWRlRm4pIHtcclxuXHQgICAgICAgIGNvbnRyb2xsZXIuaW5pdChlbGVtZW50WzBdKTtcclxuXHQgICAgICAgICRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xyXG5cdCAgICAgICAgICAgIGNvbnRyb2xsZXIucmVzZXQoZWxlbWVudFswXSk7XHJcblx0ICAgICAgICB9KTtcclxuXHQgICAgfTtcclxuXHQgICAgcmV0dXJuIERpcmVjdGl2ZTtcclxuXHR9KCkpO1xyXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuXHRleHBvcnRzLmRlZmF1bHQgPSBEaXJlY3RpdmU7XHJcblxuXG4vKioqLyB9LFxuLyogMiAqL1xuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XHJcblx0dmFyIENvbnRyb2xsZXIgPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBDb250cm9sbGVyKCRzY29wZSwgcG93ZXJCaVNlcnZpY2UpIHtcclxuXHQgICAgICAgIHRoaXMuJHNjb3BlID0gJHNjb3BlO1xyXG5cdCAgICAgICAgdGhpcy5wb3dlckJpU2VydmljZSA9IHBvd2VyQmlTZXJ2aWNlO1xyXG5cdCAgICAgICAgdGhpcy52YWxpZGF0aW9uTWFwID0ge1xyXG5cdCAgICAgICAgICAgICdyZXBvcnQnOiB0aGlzLnZhbGlkYXRlUmVwb3J0T3B0aW9uc1xyXG5cdCAgICAgICAgfTtcclxuXHQgICAgfVxyXG5cdCAgICAvKipcclxuXHQgICAgICogSGFuZGxlciBhZnRlciBjb21wb25lbnQgaXMgaW5zZXJ0ZWQgaW4gdGhlIERPTS4gSWYgcmVxdWlyZWQgYXR0cmlidXRlcyBhcmUgdmFsaWQgZW1iZWQgaW1tZWRpYXRlbHlcclxuXHQgICAgICogb3RoZXJ3aXNlLCB3YXRjaCBhdHRyaWJ1dGVzIGFuZCBlbWJlZCB3aGVuIHRoZXkgYXJlIHZhbGlkLlxyXG5cdCAgICAgKi9cclxuXHQgICAgQ29udHJvbGxlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcblx0ICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cdCAgICAgICAgaWYgKHRoaXMudmFsaWRhdGVPcHRpb25zKHRoaXMub3B0aW9ucykpIHtcclxuXHQgICAgICAgICAgICB0aGlzLmVtYmVkKGVsZW1lbnQsIHRoaXMub3B0aW9ucyk7XHJcblx0ICAgICAgICB9XHJcblx0ICAgICAgICB0aGlzLiRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMub3B0aW9uczsgfSwgZnVuY3Rpb24gKG9wdGlvbnMsIG9sZE9wdGlvbnMpIHtcclxuXHQgICAgICAgICAgICAvLyBHdWFyZCBhZ2FpbnN0IGluaXRpYWxpemF0aW9uXHJcblx0ICAgICAgICAgICAgaWYgKG9wdGlvbnMgPT09IG9sZE9wdGlvbnMpIHtcclxuXHQgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgICAgICBpZiAoX3RoaXMudmFsaWRhdGVPcHRpb25zKF90aGlzLm9wdGlvbnMpKSB7XHJcblx0ICAgICAgICAgICAgICAgIF90aGlzLmVtYmVkKGVsZW1lbnQsIF90aGlzLm9wdGlvbnMpO1xyXG5cdCAgICAgICAgICAgIH1cclxuXHQgICAgICAgIH0sIHRydWUpO1xyXG5cdCAgICB9O1xyXG5cdCAgICAvKipcclxuXHQgICAgICogR2l2ZW4gYW4gSFRNTEVsZW1lbnQsIGNvbnN0cnVjdCBhbiBlbWJlZCBjb25maWd1cmF0aW9uIGJhc2VkIG9uIGF0dHJpYnV0ZXMgYW5kIHBhc3MgdG8gc2VydmljZS5cclxuXHQgICAgICovXHJcblx0ICAgIENvbnRyb2xsZXIucHJvdG90eXBlLmVtYmVkID0gZnVuY3Rpb24gKGVsZW1lbnQsIG9wdGlvbnMpIHtcclxuXHQgICAgICAgIHRoaXMuY29tcG9uZW50ID0gdGhpcy5wb3dlckJpU2VydmljZS5lbWJlZChlbGVtZW50LCBvcHRpb25zKTtcclxuXHQgICAgfTtcclxuXHQgICAgLyoqXHJcblx0ICAgICAqIEhhbmRsZXIgd2hlbiBjb21wb25lbnQgaXMgcmVtb3ZlZCBmcm9tIERPTS4gRm9yd2FyZHMgY2FsbCB0byBzZXJ2aWNlIHRvIHBlcmZvcm0gY2xlYW51cCBvZiByZWZlcmVuY2VzIGJlZm9yZSBET00gaXMgbW9kaWZpZWQuXHJcblx0ICAgICAqL1xyXG5cdCAgICBDb250cm9sbGVyLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XHJcblx0ICAgICAgICB0aGlzLnBvd2VyQmlTZXJ2aWNlLnJlc2V0KGVsZW1lbnQpO1xyXG5cdCAgICB9O1xyXG5cdCAgICAvKipcclxuXHQgICAgICogRW5zdXJlIHJlcXVpcmVkIG9wdGlvbnMgKGVtYmVkVXJsIGFuZCBhY2Nlc3NUb2tlbiBhcmUgdmFsaWQgYmVmb3JlIGF0dGVtcHRpbmcgdG8gZW1iZWQpXHJcblx0ICAgICAqL1xyXG5cdCAgICBDb250cm9sbGVyLnByb3RvdHlwZS52YWxpZGF0ZU9wdGlvbnMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG5cdCAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnNcclxuXHQgICAgICAgICAgICB8fCAhKHR5cGVvZiBvcHRpb25zLmVtYmVkVXJsID09PSAnc3RyaW5nJyAmJiBvcHRpb25zLmVtYmVkVXJsLmxlbmd0aCA+IDApXHJcblx0ICAgICAgICAgICAgfHwgISh0eXBlb2Ygb3B0aW9ucy5hY2Nlc3NUb2tlbiA9PT0gJ3N0cmluZycgJiYgb3B0aW9ucy5hY2Nlc3NUb2tlbi5sZW5ndGggPiAwKSkge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGlmICh0aGlzLnZhbGlkYXRpb25NYXAuaGFzT3duUHJvcGVydHkob3B0aW9ucy50eXBlKSAmJiB0eXBlb2YgdGhpcy52YWxpZGF0aW9uTWFwW29wdGlvbnMudHlwZV0gPT09IFwiZnVuY3Rpb25cIikge1xyXG5cdCAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRpb25NYXBbb3B0aW9ucy50eXBlXShvcHRpb25zKTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgICAgIGVsc2Uge1xyXG5cdCAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHQgICAgICAgIH1cclxuXHQgICAgfTtcclxuXHQgICAgQ29udHJvbGxlci5wcm90b3R5cGUudmFsaWRhdGVSZXBvcnRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuXHQgICAgICAgIHJldHVybiB0cnVlO1xyXG5cdCAgICB9O1xyXG5cdCAgICBDb250cm9sbGVyLiRpbmplY3QgPSBbXHJcblx0ICAgICAgICAnJHNjb3BlJyxcclxuXHQgICAgICAgICdQb3dlckJpU2VydmljZSdcclxuXHQgICAgXTtcclxuXHQgICAgcmV0dXJuIENvbnRyb2xsZXI7XHJcblx0fSgpKTtcclxuXHRleHBvcnRzLkNvbnRyb2xsZXIgPSBDb250cm9sbGVyO1xyXG5cdHZhciBEaXJlY3RpdmUgPSAoZnVuY3Rpb24gKCkge1xyXG5cdCAgICBmdW5jdGlvbiBEaXJlY3RpdmUoKSB7XHJcblx0ICAgICAgICAvLyBzdGF0aWMgbmFtZSA9IFwicG93ZXJiaUNvbXBvbmVudFwiO1xyXG5cdCAgICAgICAgdGhpcy5yZXN0cmljdCA9IFwiRVwiO1xyXG5cdCAgICAgICAgdGhpcy5yZXBsYWNlID0gdHJ1ZTtcclxuXHQgICAgICAgIHRoaXMudGVtcGxhdGUgPSAnPGRpdiBjbGFzcz1cInBvd2VyYmktZnJhbWVcIj48L2Rpdj4nO1xyXG5cdCAgICAgICAgdGhpcy5zY29wZSA9IHtcclxuXHQgICAgICAgICAgICBhY2Nlc3NUb2tlbjogXCI9XCIsXHJcblx0ICAgICAgICAgICAgZW1iZWRVcmw6IFwiPVwiLFxyXG5cdCAgICAgICAgICAgIG9wdGlvbnM6IFwiPT9cIlxyXG5cdCAgICAgICAgfTtcclxuXHQgICAgICAgIHRoaXMuY29udHJvbGxlciA9IENvbnRyb2xsZXI7XHJcblx0ICAgICAgICB0aGlzLmJpbmRUb0NvbnRyb2xsZXIgPSB0cnVlO1xyXG5cdCAgICAgICAgdGhpcy5jb250cm9sbGVyQXMgPSBcInZtXCI7XHJcblx0ICAgIH1cclxuXHQgICAgRGlyZWN0aXZlLnByb3RvdHlwZS5saW5rID0gZnVuY3Rpb24gKCRzY29wZSwgZWxlbWVudCwgYXR0cmlidXRlcywgY29udHJvbGxlciwgdHJhbnNjbHVkZUZuKSB7XHJcblx0ICAgICAgICBjb250cm9sbGVyLmluaXQoZWxlbWVudFswXSk7XHJcblx0ICAgICAgICAkc2NvcGUuJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uICgpIHtcclxuXHQgICAgICAgICAgICBjb250cm9sbGVyLnJlc2V0KGVsZW1lbnRbMF0pO1xyXG5cdCAgICAgICAgfSk7XHJcblx0ICAgIH07XHJcblx0ICAgIHJldHVybiBEaXJlY3RpdmU7XHJcblx0fSgpKTtcclxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcblx0ZXhwb3J0cy5kZWZhdWx0ID0gRGlyZWN0aXZlO1xyXG5cblxuLyoqKi8gfSxcbi8qIDMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xyXG5cdHZhciBQb3dlckJpU2VydmljZSA9IChmdW5jdGlvbiAoKSB7XHJcblx0ICAgIGZ1bmN0aW9uIFBvd2VyQmlTZXJ2aWNlKFBvd2VyQmkpIHtcclxuXHQgICAgICAgIHRoaXMucG93ZXJCaUNvcmVTZXJ2aWNlID0gbmV3IFBvd2VyQmkoKTtcclxuXHQgICAgfVxyXG5cdCAgICBQb3dlckJpU2VydmljZS5wcm90b3R5cGUuZW1iZWQgPSBmdW5jdGlvbiAoZWxlbWVudCwgY29uZmlnKSB7XHJcblx0ICAgICAgICByZXR1cm4gdGhpcy5wb3dlckJpQ29yZVNlcnZpY2UuZW1iZWQoZWxlbWVudCwgY29uZmlnKTtcclxuXHQgICAgfTtcclxuXHQgICAgUG93ZXJCaVNlcnZpY2UucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuXHQgICAgICAgIHRoaXMucG93ZXJCaUNvcmVTZXJ2aWNlLnJlc2V0KGVsZW1lbnQpO1xyXG5cdCAgICB9O1xyXG5cdCAgICBQb3dlckJpU2VydmljZS4kaW5qZWN0ID0gW1xyXG5cdCAgICAgICAgJ1Bvd2VyQmlHbG9iYWwnXHJcblx0ICAgIF07XHJcblx0ICAgIHJldHVybiBQb3dlckJpU2VydmljZTtcclxuXHR9KCkpO1xyXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuXHRleHBvcnRzLmRlZmF1bHQgPSBQb3dlckJpU2VydmljZTtcclxuXG5cbi8qKiovIH1cbi8qKioqKiovIF0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5ndWxhci1wb3dlcmJpLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
