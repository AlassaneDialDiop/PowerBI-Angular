!function(e){function t(r){if(o[r])return o[r].exports;var i=o[r]={exports:{},id:r,loaded:!1};return e[r].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}var o={};return t.m=e,t.c=o,t.p="",t(0)}([function(e,t,o){"use strict";var r=o(1);t.reportDirective=r["default"];var i=o(2);t.service=i["default"],angular.module("powerbi.global",[]).value("PowerBiGlobal",window.Powerbi),angular.module("powerbi.service",["powerbi.global"]).service("PowerBiService",i["default"]),angular.module("powerbi.components.powerbiReport",["powerbi.service"]).directive("powerbiReport",function(){return new r["default"]}),angular.module("powerbi.components",["powerbi.components.powerbiReport"]),angular.module("powerbi",["powerbi.service","powerbi.components"])},function(e,t){"use strict";var o=function(){function e(e,t,o){this.$scope=e,this.$timeout=t,this.powerBiService=o}return e.prototype.init=function(e){var t=this;this.validateRequiredAttributes()&&this.embed(e);var o=this.debounce(this.embed.bind(this),100);this.$scope.$watch(function(){return t.embedUrl},function(r,i){r!==i&&t.validateRequiredAttributes()&&o(e)}),this.$scope.$watch(function(){return t.accessToken},function(r,i){r!==i&&t.validateRequiredAttributes()&&o(e)})},e.prototype.embed=function(e){var t={type:"report",embedUrl:this.embedUrl,accessToken:this.accessToken};angular.extend(t,this.options),this.component=this.powerBiService.embed(e,t)},e.prototype.remove=function(e){this.powerBiService.remove(this.component)},e.prototype.debounce=function(e,t){var o,r=this;return function(){for(var i=[],n=0;n<arguments.length;n++)i[n-0]=arguments[n];o&&r.$timeout.cancel(o),o=r.$timeout(function(){return e.apply(void 0,i)},t)}},e.prototype.validateRequiredAttributes=function(){return"string"==typeof this.embedUrl&&this.embedUrl.length>0&&"string"==typeof this.accessToken&&this.accessToken.length>0},e.$inject=["$scope","$timeout","PowerBiService"],e}();t.Controller=o;var r=function(){function e(){this.restrict="E",this.replace=!0,this.template='<div class="powerbi-frame"></div>',this.scope={accessToken:"=",embedUrl:"=",options:"=?"},this.controller=o,this.bindToController=!0,this.controllerAs="vm"}return e.prototype.link=function(e,t,o,r,i){r.init(t[0]),e.$on("$destroy",function(){r.remove(r.component)})},e}();Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},function(e,t){"use strict";var o=function(){function e(e){this.powerBiCoreService=new e}return e.prototype.embed=function(e,t){return this.powerBiCoreService.embed(e,t)},e.prototype.remove=function(e){this.powerBiCoreService.remove(e)},e.$inject=["PowerBiGlobal"],e}();Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=o}]);
//# sourceMappingURL=data:application/json;base64,
