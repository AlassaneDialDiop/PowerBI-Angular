/*! angular-powerbi v1.0.0-beta.4 | (c) 2016 Microsoft Corporation MIT */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("powerbi-client")):"function"==typeof define&&define.amd?define(["powerbi-client"],t):"object"==typeof exports?exports["angular-powerbi"]=t(require("powerbi-client")):e["angular-powerbi"]=t(e["powerbi-client"])}(this,function(e){return function(e){function t(i){if(o[i])return o[i].exports;var r=o[i]={exports:{},id:i,loaded:!1};return e[i].call(r.exports,r,r.exports,t),r.loaded=!0,r.exports}var o={};return t.m=e,t.c=o,t.p="",t(0)}([function(e,t,o){"use strict";var i=o(1),r=o(2),n=o(3);t.service=n["default"],t.components={report:i["default"],component:r["default"]},angular.module("powerbi.global",[]).value("PowerBiGlobal",window["powerbi-client"].service.Service),angular.module("powerbi.service",["powerbi.global"]).service("PowerBiService",n["default"]),angular.module("powerbi.components.powerbiReport",["powerbi.service"]).directive("powerbiReport",function(){return new i["default"]}),angular.module("powerbi.components.powerbiComponent",["powerbi.service"]).directive("powerbiComponent",function(){return new r["default"]}),angular.module("powerbi.components",["powerbi.components.powerbiReport","powerbi.components.powerbiComponent"]),angular.module("powerbi",["powerbi.service","powerbi.components"])},function(e,t){"use strict";var o=function(){function e(e,t,o){this.$scope=e,this.$timeout=t,this.powerBiService=o}return e.prototype.init=function(e){var t=this;this.validateRequiredAttributes()&&this.embed(e);var o=this.debounce(function(){t.validateRequiredAttributes()?t.embed(e):t.component&&t.reset(e)},100);this.$scope.$watch(function(){return t.embedUrl},function(t,i){t!==i&&o(e)}),this.$scope.$watch(function(){return t.accessToken},function(t,i){t!==i&&o(e)})},e.prototype.embed=function(e){var t={type:"report",embedUrl:this.embedUrl,accessToken:this.accessToken,id:this.reportId,uniqueId:this.name};angular.extend(t,this.options),this.component=this.powerBiService.embed(e,t)},e.prototype.reset=function(e){this.powerBiService.reset(e),this.component=null},e.prototype.debounce=function(e,t){var o,i=this;return function(){for(var r=[],n=0;n<arguments.length;n++)r[n-0]=arguments[n];o&&i.$timeout.cancel(o),o=i.$timeout(function(){return e.apply(void 0,r)},t)}},e.prototype.validateRequiredAttributes=function(){return"string"==typeof this.embedUrl&&this.embedUrl.length>0&&"string"==typeof this.accessToken&&this.accessToken.length>0},e.$inject=["$scope","$timeout","PowerBiService"],e}();t.Controller=o;var i=function(){function e(){this.restrict="E",this.replace=!0,this.template='<div class="powerbi-frame"></div>',this.scope={accessToken:"=",embedUrl:"=",reportId:"=?",name:"=?",options:"=?"},this.controller=o,this.bindToController=!0,this.controllerAs="vm"}return e.prototype.link=function(e,t,o,i,r){i.init(t[0]),e.$on("$destroy",function(){i.reset(t[0])})},e}();Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i},function(e,t){"use strict";var o=function(){function e(e,t){this.$scope=e,this.powerBiService=t,this.validationMap={report:this.validateReportOptions}}return e.prototype.init=function(e){var t=this;this.validateOptions(this.options)&&this.embed(e,this.options),this.$scope.$watch(function(){return t.options},function(o,i){o!==i&&(t.validateOptions(t.options)?t.embed(e,t.options):t.component&&t.reset(e))},!0)},e.prototype.embed=function(e,t){this.component=this.powerBiService.embed(e,t)},e.prototype.reset=function(e){this.powerBiService.reset(e),this.component=null},e.prototype.validateOptions=function(e){return this.options&&"string"==typeof e.embedUrl&&e.embedUrl.length>0&&"string"==typeof e.accessToken&&e.accessToken.length>0&&this.validationMap.hasOwnProperty(e.type)&&"function"==typeof this.validationMap[e.type]?this.validationMap[e.type](e):!1},e.prototype.validateReportOptions=function(e){return!0},e.$inject=["$scope","PowerBiService"],e}();t.Controller=o;var i=function(){function e(){this.restrict="E",this.replace=!0,this.template='<div class="powerbi-frame"></div>',this.scope={accessToken:"=",embedUrl:"=",options:"=?"},this.controller=o,this.bindToController=!0,this.controllerAs="vm"}return e.prototype.link=function(e,t,o,i,r){i.init(t[0]),e.$on("$destroy",function(){i.reset(t[0])})},e}();Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=i},function(e,t,o){"use strict";var i=o(4),r=function(){function e(e){this.powerBiCoreService=new e(i.factories.hpmFactory,i.factories.wpmpFactory,i.factories.routerFactory)}return e.prototype.embed=function(e,t){return this.powerBiCoreService.embed(e,t)},e.prototype.reset=function(e){this.powerBiCoreService.reset(e)},e.$inject=["PowerBiGlobal"],e}();Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=r},function(t,o){t.exports=e}])});
//# sourceMappingURL=data:application/json;base64,
